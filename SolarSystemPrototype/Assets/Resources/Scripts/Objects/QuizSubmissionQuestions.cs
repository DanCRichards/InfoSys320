// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuizSubmissionQuestionsNamespace;
//
//    var quizSubmissionQuestions = QuizSubmissionQuestions.FromJson(jsonString);

namespace QuizSubmissionQuestionsNamespace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class QuizSubmissionQuestions
    {
        [JsonProperty("quiz_submission_questions")]
        public QuizSubmissionQuestion[] QuizSubmissionQuestionsQuizSubmissionQuestions { get; set; }
    }

    public partial class QuizSubmissionQuestion
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("quiz_id")]
        public long QuizId { get; set; }

        [JsonProperty("quiz_group_id")]
        public object QuizGroupId { get; set; }

        [JsonProperty("assessment_question_id")]
        public long AssessmentQuestionId { get; set; }

        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("question_name")]
        public string QuestionName { get; set; }

        [JsonProperty("question_type")]
        public string QuestionType { get; set; }

        [JsonProperty("question_text")]
        public string QuestionText { get; set; }

        [JsonProperty("answers")]
        public Answer[] Answers { get; set; }

        [JsonProperty("variables")]
        public object Variables { get; set; }

        [JsonProperty("formulas")]
        public object Formulas { get; set; }

        [JsonProperty("answer_tolerance")]
        public object AnswerTolerance { get; set; }

        [JsonProperty("formula_decimal_places")]
        public object FormulaDecimalPlaces { get; set; }

        [JsonProperty("matches")]
        public object Matches { get; set; }

        [JsonProperty("flagged")]
        public bool Flagged { get; set; }

        [JsonProperty("answer")]
        public object Answer { get; set; }
    }

    public partial class Answer
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("html")]
        public string Html { get; set; }
    }

    public partial class QuizSubmissionQuestions
    {
        public static QuizSubmissionQuestions FromJson(string json) => JsonConvert.DeserializeObject<QuizSubmissionQuestions>(json, QuizSubmissionQuestionsNamespace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this QuizSubmissionQuestions self) => JsonConvert.SerializeObject(self, QuizSubmissionQuestionsNamespace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
