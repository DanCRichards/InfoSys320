// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuizSubmissionsNamespace;
//
//    var quizSubmissions = QuizSubmissions.FromJson(jsonString);

namespace QuizSubmissionsNamespace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class QuizSubmissions
    {
        [JsonProperty("quiz_submissions")]
        public QuizSubmission[] QuizSubmissionsQuizSubmissions { get; set; }
    }

    public partial class QuizSubmission
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("quiz_id")]
        public long QuizId { get; set; }

        [JsonProperty("quiz_version")]
        public long QuizVersion { get; set; }

        [JsonProperty("user_id")]
        public long UserId { get; set; }

        [JsonProperty("submission_id")]
        public object SubmissionId { get; set; }

        [JsonProperty("score")]
        public object Score { get; set; }

        [JsonProperty("kept_score")]
        public long KeptScore { get; set; }

        [JsonProperty("started_at")]
        public DateTimeOffset StartedAt { get; set; }

        [JsonProperty("end_at")]
        public DateTimeOffset EndAt { get; set; }

        [JsonProperty("finished_at")]
        public object FinishedAt { get; set; }

        [JsonProperty("attempt")]
        public long Attempt { get; set; }

        [JsonProperty("workflow_state")]
        public string WorkflowState { get; set; }

        [JsonProperty("fudge_points")]
        public object FudgePoints { get; set; }

        [JsonProperty("quiz_points_possible")]
        public long QuizPointsPossible { get; set; }

        [JsonProperty("extra_attempts")]
        public object ExtraAttempts { get; set; }

        [JsonProperty("extra_time")]
        public object ExtraTime { get; set; }

        [JsonProperty("manually_unlocked")]
        public object ManuallyUnlocked { get; set; }

        [JsonProperty("validation_token")]
        public string ValidationToken { get; set; }

        [JsonProperty("score_before_regrade")]
        public object ScoreBeforeRegrade { get; set; }

        [JsonProperty("has_seen_results")]
        public bool HasSeenResults { get; set; }

        [JsonProperty("time_spent")]
        public object TimeSpent { get; set; }

        [JsonProperty("attempts_left")]
        public long AttemptsLeft { get; set; }

        [JsonProperty("overdue_and_needs_submission")]
        public bool OverdueAndNeedsSubmission { get; set; }

        [JsonProperty("excused?")]
        public object Excused { get; set; }

        [JsonProperty("html_url")]
        public Uri HtmlUrl { get; set; }
    }

    public partial class QuizSubmissions
    {
        public static QuizSubmissions FromJson(string json) => JsonConvert.DeserializeObject<QuizSubmissions>(json, QuizSubmissionsNamespace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this QuizSubmissions self) => JsonConvert.SerializeObject(self, QuizSubmissionsNamespace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
